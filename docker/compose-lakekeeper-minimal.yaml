services:
#   jupyter:
#     image: quay.io/jupyter/pyspark-notebook:spark-3.5.3
#     # image: quay.io/jupyter/pyspark-notebook:2025-07-14
#     depends_on:
#       lakekeeper:
#         condition: service_healthy
#       initialwarehouse:
#         condition: service_completed_successfully
# #      trino:
# #        condition: service_healthy
# #      starrocks:
# #        condition: service_healthy
#     command: start-notebook.sh --NotebookApp.token=''
#     volumes:
#       - ./lakekeeper-notebooks:/home/jovyan/tutorial/
#     networks:
#       iceberg_net:
#     ports:
#       - "8888:8888"
  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile.3.5.6-final
    container_name: spark-master
    ports:
      - "8082:8080"  # Spark master UI (using 8082 to avoid conflicts)
      - "7077:7077"  # Spark master port
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ../data:/opt/bitnami/spark/data
      - ../src:/opt/bitnami/spark/src
      - ../notebooks:/opt/bitnami/spark/notebooks
      - ../scripts:/opt/bitnami/spark/scripts
    networks:
      - iceberg_net

  spark-worker:
    build:
      context: ./spark
      dockerfile: Dockerfile.3.5.6
    container_name: spark-worker
    depends_on:
      - spark-master
    ports:
      - "8083:8081"  # Spark worker UI (using 8083 to avoid conflicts)
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ../data:/opt/bitnami/spark/data
      - ../src:/opt/bitnami/spark/src
      - ../scripts:/opt/bitnami/spark/scripts
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    networks:
      - iceberg_net

  jupyter:
    build:
      context: ./spark
      dockerfile: Dockerfile.3.5.6
    container_name: jupyter
    depends_on:
      - spark-master
    ports:
      - "8889:8888"  # Jupyter notebook (using 8889 to avoid conflicts)
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
    volumes:
      - ../data:/opt/bitnami/spark/data
      - ../src:/opt/bitnami/spark/src
      - ../notebooks:/opt/bitnami/spark/notebooks
      - ../scripts:/opt/bitnami/spark/scripts
    command: >
      bash -c "
        cd /opt/bitnami/spark/notebooks && jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
      "
    networks:
      - iceberg_net
  lakekeeper:
    image: ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@db:5432/postgres
      - RUST_LOG=trace,axum=trace,sqlx=trace,lakekeeper=trace
    command: [ "serve" ]
    healthcheck:
      test: [ "CMD", "/home/nonroot/lakekeeper", "healthcheck" ]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 3s
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      iceberg_net:
    ports:
      - "8181:8181"

  migrate:
    image: ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@db:5432/postgres
      - RUST_LOG=info
    restart: "no"
    command: [ "migrate" ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      iceberg_net:

  bootstrap:
    image: docker.arvancloud.ir/curlimages/curl
    depends_on:
      lakekeeper:
        condition: service_healthy
    restart: "no"
    command:
      - -w
      - "%{http_code}"
      - "-X"
      - "POST"
      - "-v"
      - "http://lakekeeper:8181/management/v1/bootstrap"
      - "-H"
      - "Content-Type: application/json"
      - "--data"
      - '{"accept-terms-of-use": true}'
      - "-o"
      - "/dev/null"
      # - "--fail-with-body"
    networks:
      iceberg_net:

  initialwarehouse:
    image: docker.arvancloud.ir/curlimages/curl
    depends_on:
      lakekeeper:
        condition: service_healthy
      bootstrap:
        condition: service_completed_successfully
    restart: "no"
    command:
      - -w
      - "%{http_code}"
      - "-X"
      - "POST"
      - "-v"
      - "http://lakekeeper:8181/management/v1/warehouse"
      - "-H"
      - "Content-Type: application/json"
      - "--data"
      - "@create-default-warehouse.json"
      - "-o"
      - "/dev/null"
      # - "--fail-with-body"
    volumes:
      - ./create-default-warehouse.json:/home/curl_user/create-default-warehouse.json
    networks:
      iceberg_net:

  db:
    image: docker.arvancloud.ir/bitnami/postgresql:17
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      iceberg_net:
    volumes:
      - postgres-lakekeeper:/bitnami/postgresql
    ports:
      - "5454:5432"

  minio:
    image: docker.arvancloud.ir/bitnami/minio:2025.4.22
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
      - MINIO_API_PORT_NUMBER=9000
      - MINIO_CONSOLE_PORT_NUMBER=9001
      - MINIO_SCHEME=http
      - MINIO_DEFAULT_BUCKETS=irisa-ot-warehouse
    healthcheck:
      test: [ "CMD", "mc", "ls", "local", "|", "grep", "examples" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 15s
    networks:
      iceberg_net:
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/bitnami/minio/data
  
  trino:
    image: docker.arvancloud.ir/trinodb/trino:476
    environment:
      - CATALOG_MANAGEMENT=dynamic
    profiles:
      - trino
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://localhost:8080/v1/status" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    ports:
      - "9999:8080"
    networks:
      - iceberg_net

  starrocks:
    image: docker.arvancloud.ir/starrocks/allin1-ubuntu:3.5-latest
    profiles:
      - starrocks
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://starrocks:8030/api/health" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 30s
    ports:
      - "9030:9030"
      - "8030:8030"
    networks:
      - iceberg_net

volumes:
  minio-data:
  postgres-lakekeeper:

networks:
  iceberg_net:
